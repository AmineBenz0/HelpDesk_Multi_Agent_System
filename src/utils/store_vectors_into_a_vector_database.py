# -*- coding: utf-8 -*-
"""Store vectors into a vector database.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_WSbhECcfgsh6gnP7f6sJQPeAfqfLBm
"""

import os
import numpy as np
from sentence_transformers import SentenceTransformer
from typing import List, Dict, Any, Optional
import chromadb
from uuid import uuid4

# Function to store vectors in ChromaDB
def store_vectors_in_chroma(
    vectors: List[List[float]],
    documents: List[str],
    metadatas: Optional[List[Dict[Any, Any]]] = None,
    collection_name: str = "my_collection",
    persist_directory: str = "./chroma_db"
) -> chromadb.Collection:
    """
    Store text chunks and their corresponding vector embeddings in ChromaDB.

    Args:
        vectors: List of embedding vectors corresponding to the text chunks
        documents: List of text chunks to store
        metadatas: Optional list of metadata dictionaries for each text chunk
        collection_name: Name of the collection to store vectors in
        persist_directory: Directory to persist the ChromaDB data

    Returns:
        The ChromaDB collection object containing the stored vectors
    """
    # Create directory if it doesn't exist
    os.makedirs(persist_directory, exist_ok=True)

    # Initialize ChromaDB client with persistence
    chroma_client = chromadb.PersistentClient(path=persist_directory)

    # Delete collection if it exists to avoid duplicates
    try:
        chroma_client.delete_collection(collection_name)
        print(f"Deleted existing collection '{collection_name}'")
    except:
        pass  # Collection doesn't exist yet

    # Create a new collection
    collection = chroma_client.create_collection(name=collection_name)

    # Generate unique IDs
    ids = [str(uuid4()) for _ in documents]

    # If no metadata provided, create empty metadata
    if metadatas is None:
        metadatas = [{} for _ in range(len(documents))]

    # Add documents to collection
    collection.add(
        embeddings=vectors,
        documents=documents,
        metadatas=metadatas,
        ids=ids
    )

    print(f"âœ… Stored {len(documents)} vectors in ChromaDB collection '{collection_name}'")
    return collection

# Function to query similar documents
def query_similar_documents(
    query_vector: List[float],
    collection,
    n_results: int = 5
):
    """
    Query ChromaDB for documents similar to the given vector.

    Args:
        query_vector: The vector to search for similar documents
        collection: ChromaDB collection to search in
        n_results: Number of similar documents to return (default: 5)

    Returns:
        Dictionary with 'documents', 'metadatas', and 'distances' for the matching results
    """
    # Query the collection
    results = collection.query(
        query_embeddings=[query_vector],
        n_results=n_results
    )

    # Format the results
    formatted_results = {
        "documents": results["documents"][0],
        "metadatas": results["metadatas"][0],
        "distances": results["distances"][0] if "distances" in results else None
    }

    print(f"Found {len(formatted_results['documents'])} similar documents")
    return formatted_results
# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3Q6mFOJLDVsX2SbhOTSql_B9wVTYK_M
"""

!pip install -q groq sentence-transformers faiss-cpu pandas openpyxl

# ðŸ“‚ 3. Chargement des donnÃ©es
import pandas as pd

# TÃ©lÃ©verse les fichiers via lâ€™interface de Colab
emails_df = pd.read_excel("/content/emails_incidents_dataset (2).xlsx")
criteria_df = pd.read_excel("/content/Matrice P1  P2 dÃ©taillÃ©e.xlsx")

# Extraction des emails (ajuste si la colonne a un nom diffÃ©rent)
emails = emails_df['email'].dropna().tolist()

# ðŸ§  4. Embedding avec sentence-transformers et indexation FAISS
from sentence_transformers import SentenceTransformer
import numpy as np
import faiss

model = SentenceTransformer("sentence-transformers/all-mpnet-base-v2")
email_embeddings = model.encode(emails, show_progress_bar=True)

dimension = email_embeddings.shape[1]
faiss_index = faiss.IndexFlatL2(dimension)
faiss_index.add(np.array(email_embeddings))

print("ðŸ“Œ Colonnes disponibles dans le fichier :", emails_df.columns.tolist())

from groq import Groq

client = Groq(api_key="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")

models = client.models.list()

for model in models.data:
    print(model.id)

"""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


"""

# âœ… INSTALLATION
!pip install -q sentence-transformers groq pandas

# âœ… IMPORTS
from sentence_transformers import SentenceTransformer
import pandas as pd
import groq
import os

# âœ… CONFIG
os.environ["GROQ_API_KEY"] = "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"  # ðŸ”‘ Remplacer par ta vraie clÃ©
groq_client = groq.Groq(api_key=os.environ["GROQ_API_KEY"])

# âœ… MODEL MAPPING
model_map = {
    "LLaMA3-70B": "llama3-70b-8192",
    "gemma2-9b-it": "gemma2-9b-it",  # Confirmed name from Groq docs
    "qwen-qwq-32b": "qwen-qwq-32b"
}

responses = {friendly_name: [] for friendly_name in model_map.keys()}

# âœ… EMAILS
emails = [
    "Bonjour, nous avons une panne totale du systÃ¨me de billetterie Ã  la gare de Lyon. Aucun ticket ne peut Ãªtre Ã©mis. Merci d'agir rapidement.",
    "Salam, le WIFI est trÃ¨s instable dans la salle de pause du personnel Ã  la gare de Marseille. Pouvez-vous vÃ©rifier cela avec l'opÃ©rateur ?",
    "Bonjour, nous avons reÃ§u une alerte concernant une surcharge Ã©lectrique dans la salle serveur du centre de gestion. Veuillez traiter cela comme prioritaire."
]

# âœ… EMBEDDINGS
model = SentenceTransformer("sentence-transformers/all-mpnet-base-v2")
embeddings = model.encode(emails)

# âœ… PROMPT FUNCTION
def build_prompt(email):
    return f"""
Tu es un expert dans lâ€™analyse dâ€™incidents informatiques. Voici un email utilisateur :

"{email}"

1. Est-ce un incident ? (RÃ©ponds par OUI ou NON)
2. Si oui, indique :
   - Lâ€™Ã©tablissement ou gare concernÃ©e
   - Le groupe dâ€™affectation ou prestataire
   - La prioritÃ© (P1 ou P2)
3. Si le message est incomplet, propose des informations complÃ©mentaires Ã  demander.
Donne la rÃ©ponse sous forme dâ€™analyse claire.
"""

# âœ… ANALYSE
for email in emails:
    prompt = build_prompt(email)
    for friendly_name, model_id in model_map.items():
        try:
            response = groq_client.chat.completions.create(
                model=model_id,
                messages=[{"role": "user", "content": prompt}]
            )
            responses[friendly_name].append(response.choices[0].message.content.strip())
        except Exception as e:
            responses[friendly_name].append(f"Erreur : {e}")

# âœ… DISPLAY RESULTS
df = pd.DataFrame({
    "Email": emails,
    "LLaMA3-70B_Analysis": responses["LLaMA3-70B"],
    "Gemma-9B_Analysis": responses["gemma2-9b-it"],
    "Qwen-QWQ-32B_Analysis": responses["qwen-qwq-32b"]
})

pd.set_option("display.max_colwidth", None)
print(df)